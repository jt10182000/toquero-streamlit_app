# -*- coding: utf-8 -*-
"""toquero_Act._Endterm1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SdpbZUTE0jccLaREe9E6AlkfQ-Xp9q5M
"""


import nltk.classify.util
from nltk.classify import NaiveBayesClassifier
from nltk.corpus import names

# Define features (words) and their corresponding labels (positive/negative)
def word_features(words):
    return dict([(word, True) for word in words])

happy_emotions = ['joy', 'bliss', 'cheerfulness', 'contentment', 'pleasure', 'delight', 'satisfaction', 'ecstacy']
sad_emotions = ['sorrow', 'miserable', 'upset', 'brokenhearted', 'hurt', 'lonely', 'tearful', 'down', 'gloomy', 'unhappy']
angry_emotions = ['frustrated', 'irritated', 'annoyed', 'mad', 'agitated', 'enraged', 'furious', 'bitter', 'wrathful','incensed']
excited_emotions = ['thrilled', 'eager', 'enthusiastic', 'pumped', 'overjoyed', 'animated', 'ecstatic', 'elated', 'jubilant', 'electrified']
nervous_emotions = ['anxious', 'worried', 'tense', 'uneasy', 'restless', 'jittery', 'trembling', 'on edge']
scared_emotions = ['afraid', 'terrified', 'frigthened', 'panicked', 'petrified', 'spooked', 'nervous', 'startled']

happy_features = [(word_features(happy_word.split()), 'happy') for happy_word in happy_emotions]
sad_features = [(word_features(sad_word.split()), 'sad') for sad_word in sad_emotions]
angry_features = [(word_features(angry_word.split()), 'angry') for angry_word in angry_emotions]
excited_features = [(word_features(excited_word.split()), 'excited') for excited_word in excited_emotions]
nervous_features = [(word_features(nervous_word.split()), 'nervous') for nervous_word in nervous_emotions]
scared_features = [(word_features(scared_word.split()), 'scared') for scared_word in scared_emotions]

# Combine positive and negative features
train_set = happy_features + sad_features + angry_features + excited_features + nervous_features + scared_features

#Coding Activity Endterm 1
#Create a program that can detect at least (5) feelings
#happy sad angry excited nervous scared

# Train the Naive Bayes classifier
classifier = NaiveBayesClassifier.train(train_set)

# Example sentence for sentiment analysis (put your sentences here)
# sentence = "The Scargiver feels like a loosely threaded series of grand ideas and sincere emotional beats that require so much more connective tissue to thread together into an actual narrative worth investing in."
sentence = "i get nervous everytime when I'm with you"
# Classify the sentence
sentiment = classifier.classify(word_features(sentence.split()))

print(f"Sentence: {sentence}")
print(f"Sentiment: {sentiment}")

import nltk.classify.util
from nltk.classify import NaiveBayesClassifier
from nltk.corpus import names

# Define features (words) and their corresponding labels (positive/negative)
def word_features(words):
    return dict([(word, True) for word in words])

positive_words = ['awesome', 'outstanding', 'fantastic', 'terrific', 'good']
negative_words = ['bad', 'terrible', 'awful', 'horrible', 'poor', 'difficult' ]

positive_features = [(word_features(pos_word.split()), 'positive') for pos_word in positive_words]
negative_features = [(word_features(neg_word.split()), 'negative') for neg_word in negative_words]

# Combine positive and negative features
train_set = positive_features + negative_features

#Coding Activity Endterm 1
#Create a program that can detect at least (5) feelings
#happy sad angry excited nervous scared

# Train the Naive Bayes classifier
classifier = NaiveBayesClassifier.train(train_set)

# Example sentence for sentiment analysis (put your sentences here)
# sentence = "The Scargiver feels like a loosely threaded series of grand ideas and sincere emotional beats that require so much more connective tissue to thread together into an actual narrative worth investing in."
sentence = "i'm having a hard time,it's difficult"
# Classify the sentence
sentiment = classifier.classify(word_features(sentence.split()))

print(f"Sentence: {sentence}")
print(f"Sentiment: {sentiment}")

pip install vaderSentiment

from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer

# --- examples -------
sentences = ["VADER is smart, handsome, and funny.",  # positive sentence example
             "VADER is smart, handsome, and funny!",  # punctuation emphasis handled correctly (sentiment intensity adjusted)
             "VADER is very smart, handsome, and funny.", # booster words handled correctly (sentiment intensity adjusted)
             "VADER is VERY SMART, handsome, and FUNNY.",  # emphasis for ALLCAPS handled
             "VADER is VERY SMART, handsome, and FUNNY!!!", # combination of signals - VADER appropriately adjusts intensity
             "VADER is VERY SMART, uber handsome, and FRIGGIN FUNNY!!!", # booster words & punctuation make this close to ceiling for score
             "VADER is not smart, handsome, nor funny.",  # negation sentence example
             "The book was good.",  # positive sentence
             "At least it isn't a horrible book.",  # negated negative sentence with contraction
             "The book was only kind of good.", # qualified positive sentence is handled correctly (intensity adjusted)
             "The plot was good, but the characters are uncompelling and the dialog is not great.", # mixed negation sentence
             "Today SUX!",  # negative slang with capitalization emphasis
             "Today only kinda sux! But I'll get by, lol", # mixed sentiment example with slang and constrastive conjunction "but"
             "Make sure you :) or :D today!",  # emoticons handled
             "Catch utf-8 emoji such as such as üíò and üíã and üòÅ",  # emojis handled
             "LNWD is a imperfectly perfect horror movie with an extremely unique premise. Though it seem to reach out it never come to contact all mediums in the audience. Story develops gradually but ends almost abruptly. There's so many distracting plot holes that strands the whole experience which otherwise could have been a major hit easily. Great viaual effects raises the movie's worth. Good audio effects that suits" ]

analyzer = SentimentIntensityAnalyzer()
for sentence in sentences:
    vs = analyzer.polarity_scores(sentence)
    print("{:-<65} {}".format(sentence, str(vs)))